// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/pokemon.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entity "rest-api-golang/internal/app/entity"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPokemonRepositoryInterface is a mock of PokemonRepositoryInterface interface.
type MockPokemonRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonRepositoryInterfaceMockRecorder
}

// MockPokemonRepositoryInterfaceMockRecorder is the mock recorder for MockPokemonRepositoryInterface.
type MockPokemonRepositoryInterfaceMockRecorder struct {
	mock *MockPokemonRepositoryInterface
}

// NewMockPokemonRepositoryInterface creates a new mock instance.
func NewMockPokemonRepositoryInterface(ctrl *gomock.Controller) *MockPokemonRepositoryInterface {
	mock := &MockPokemonRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPokemonRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokemonRepositoryInterface) EXPECT() *MockPokemonRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CommitTx mocks base method.
func (m *MockPokemonRepositoryInterface) CommitTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) CommitTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).CommitTx))
}

// CreatePokemon mocks base method.
func (m *MockPokemonRepositoryInterface) CreatePokemon(pokemon *entity.Pokemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePokemon", pokemon)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePokemon indicates an expected call of CreatePokemon.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) CreatePokemon(pokemon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePokemon", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).CreatePokemon), pokemon)
}

// CreateTx mocks base method.
func (m *MockPokemonRepositoryInterface) CreateTx() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) CreateTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).CreateTx))
}

// DeletePokemon mocks base method.
func (m *MockPokemonRepositoryInterface) DeletePokemon(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePokemon", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePokemon indicates an expected call of DeletePokemon.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) DeletePokemon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePokemon", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).DeletePokemon), id)
}

// GetAllPokemons mocks base method.
func (m *MockPokemonRepositoryInterface) GetAllPokemons(preloads ...string) (*[]entity.Pokemon, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllPokemons", varargs...)
	ret0, _ := ret[0].(*[]entity.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPokemons indicates an expected call of GetAllPokemons.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) GetAllPokemons(preloads ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPokemons", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).GetAllPokemons), preloads...)
}

// GetPokemon mocks base method.
func (m *MockPokemonRepositoryInterface) GetPokemon(id string, preloads ...string) (*[]entity.Pokemon, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range preloads {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPokemon", varargs...)
	ret0, _ := ret[0].(*[]entity.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemon indicates an expected call of GetPokemon.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) GetPokemon(id interface{}, preloads ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, preloads...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemon", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).GetPokemon), varargs...)
}

// RollbackTx mocks base method.
func (m *MockPokemonRepositoryInterface) RollbackTx() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) RollbackTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).RollbackTx))
}

// UpdatePokemon mocks base method.
func (m *MockPokemonRepositoryInterface) UpdatePokemon(pokemon *entity.Pokemon, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePokemon", pokemon, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePokemon indicates an expected call of UpdatePokemon.
func (mr *MockPokemonRepositoryInterfaceMockRecorder) UpdatePokemon(pokemon, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePokemon", reflect.TypeOf((*MockPokemonRepositoryInterface)(nil).UpdatePokemon), pokemon, id)
}
