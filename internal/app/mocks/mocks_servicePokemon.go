// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/pokemon.go

// Package mock_service is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entity "rest-api-golang/internal/app/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockPokemonServiceInterface is a mock of PokemonServiceInterface interface.
type MockPokemonServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonServiceInterfaceMockRecorder
}

// MockPokemonServiceInterfaceMockRecorder is the mock recorder for MockPokemonServiceInterface.
type MockPokemonServiceInterfaceMockRecorder struct {
	mock *MockPokemonServiceInterface
}

// NewMockPokemonServiceInterface creates a new mock instance.
func NewMockPokemonServiceInterface(ctrl *gomock.Controller) *MockPokemonServiceInterface {
	mock := &MockPokemonServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPokemonServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokemonServiceInterface) EXPECT() *MockPokemonServiceInterfaceMockRecorder {
	return m.recorder
}

// CreatePokemon mocks base method.
func (m *MockPokemonServiceInterface) CreatePokemon(pokemon *entity.Pokemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePokemon", pokemon)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePokemon indicates an expected call of CreatePokemon.
func (mr *MockPokemonServiceInterfaceMockRecorder) CreatePokemon(pokemon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePokemon", reflect.TypeOf((*MockPokemonServiceInterface)(nil).CreatePokemon), pokemon)
}

// DeletePokemon mocks base method.
func (m *MockPokemonServiceInterface) DeletePokemon(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePokemon", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePokemon indicates an expected call of DeletePokemon.
func (mr *MockPokemonServiceInterfaceMockRecorder) DeletePokemon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePokemon", reflect.TypeOf((*MockPokemonServiceInterface)(nil).DeletePokemon), id)
}

// GetAllPokemons mocks base method.
func (m *MockPokemonServiceInterface) GetAllPokemons() (*[]entity.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPokemons")
	ret0, _ := ret[0].(*[]entity.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPokemons indicates an expected call of GetAllPokemons.
func (mr *MockPokemonServiceInterfaceMockRecorder) GetAllPokemons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPokemons", reflect.TypeOf((*MockPokemonServiceInterface)(nil).GetAllPokemons))
}

// GetPokemon mocks base method.
func (m *MockPokemonServiceInterface) GetPokemon(id string) (*[]entity.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemon", id)
	ret0, _ := ret[0].(*[]entity.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemon indicates an expected call of GetPokemon.
func (mr *MockPokemonServiceInterfaceMockRecorder) GetPokemon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemon", reflect.TypeOf((*MockPokemonServiceInterface)(nil).GetPokemon), id)
}

// UpdatePokemon mocks base method.
func (m *MockPokemonServiceInterface) UpdatePokemon(pokemon *entity.Pokemon, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePokemon", pokemon, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePokemon indicates an expected call of UpdatePokemon.
func (mr *MockPokemonServiceInterfaceMockRecorder) UpdatePokemon(pokemon, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePokemon", reflect.TypeOf((*MockPokemonServiceInterface)(nil).UpdatePokemon), pokemon, id)
}
